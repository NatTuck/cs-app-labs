Secret Phase
============

The README says there is a secret phase which appears if we append a string to
phase 4's input. Let's see if we can find that out.

I looked through main and saw that I had anaylzed all functions except 2 of
them: readlines and phase_defused. I doubt readline could have anything
interesting and sure enough it didn't so I checked out phase_defused.

The first thing that phase_defused does after the function prologue is

.text:08049533                 cmp     num_input_strings, 6
.text:0804953A                 jnz     short loc_804959F

and exit if the condition is false. I figured out that bomb is checking if 6
phases have been defused. So what happens if the sixth phase is defused?

.text:0804953C                 lea     ebx, [ebp+var_50]
.text:0804953F                 push    ebx
.text:08049540                 lea     eax, [ebp+var_54]
.text:08049543                 push    eax
.text:08049544                 push    offset aDS      ; "%d %s"
.text:08049549                 push    804B770h        ; char *
.text:0804954E                 call    _sscanf
.text:08049553                 add     esp, 10h
.text:08049556                 cmp     eax, 2
.text:08049559                 jnz     short loc_8049592

.text:08049592                 add     esp, 0FFFFFFF4h
.text:08049595                 push    offset aCongratulation ;
"Congratulations! You've defused the bom"...
.text:0804959A                 call    _printf

Okay so it tries to read a number and a string from some memory location and
prints congratulations if it doesn't read 2 inputs. I keep looking ahead:

.text:0804955B                 add     esp, 0FFFFFFF8h
.text:0804955E                 push    offset aAustinpowers ; "austinpowers"
.text:08049563                 push    ebx
.text:08049564                 call    strings_not_equal
.text:08049569                 add     esp, 10h
.text:0804956C                 test    eax, eax
.text:0804956E                 jnz     short loc_8049592

Ah ha! So the string that is expected is "austinpowers"(remember what the
README for the lab said?). I append it to the 4th phase answer and try again:

Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
1 2 6 24 120 720
0 q 777
9 austinpowers
o0ekm1
4 2 6 3 1 5 
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Good work!  On to the next...
Curses, you've found the secret phase!
But finding it and solving it are quite different...

Yeah I found the secret phase! Let's take a look at secret_phase().

.text:08048EEF                 call    read_line
.text:08048EF4                 push    0
.text:08048EF6                 push    0Ah
.text:08048EF8                 push    0
.text:08048EFA                 push    eax
.text:08048EFB                 call    ___strtol_internal
.text:08048F00                 add     esp, 10h
.text:08048F03                 mov     ebx, eax
.text:08048F05                 lea     eax, [ebx-1]
.text:08048F08                 cmp     eax, 1000
.text:08048F0D                 jbe     short loc_8048F14
.text:08048F0F                 call    explode_bomb

The bomb reads a number(num) and explodes if (num - 1) > 1000. Okay that's
useful information. Let's keep digging.

.text:08048F17                 push    ebx
.text:08048F18                 push    offset n1
.text:08048F1D                 call    fun7
.text:08048F22                 add     esp, 10h
.text:08048F25                 cmp     eax, 7
.text:08048F28                 jz      short loc_8048F2F
.text:08048F2A                 call    explode_bomb

Therefore, fun7(n1, num) should return the value 7 else bomb will explode. What
doesn't fun7 do anyway? Let's check that out.

.text:08048E9A                 mov     edx, [ebp+n1]
.text:08048E9D                 mov     eax, [ebp+num]
.text:08048EA0                 test    edx, edx
.text:08048EA2                 jnz     short loc_8048EB0
.text:08048EA4                 mov     eax, 0FFFFFFFFh
.text:08048EA9                 jmp     short loc_8048EE2

fun7 checks if n1 is null and returns -1 if that is true. If n1 is not null:

.text:08048EB0                 cmp     eax, [edx]
.text:08048EB2                 jge     short loc_8048EC5
.text:08048EB4                 add     esp, 0FFFFFFF8h
.text:08048EB7                 push    eax
.text:08048EB8                 mov     eax, [edx+4]
.text:08048EBB                 push    eax
.text:08048EBC                 call    fun7
.text:08048EC1                 add     eax, eax
.text:08048EC3                 jmp     short loc_8048EE2

fun7 compares num1 and n1. If n1 is greater, fun7 is called again with value at
offset 4 into n1(I suppose it's a structure) and num as arguments. It then
doubles the return value from the recursive call and return that as it's return
value.

If num1 is greater than or equal to n1:

.text:08048EC5                 cmp     eax, [edx]
.text:08048EC7                 jz      short loc_8048EE0
.text:08048EC9                 add     esp, 0FFFFFFF8h
.text:08048ECC                 push    eax
.text:08048ECD                 mov     eax, [edx+8]
.text:08048ED0                 push    eax
.text:08048ED1                 call    fun7
.text:08048ED6                 add     eax, eax
.text:08048ED8                 inc     eax
.text:08048ED9                 jmp     short loc_8048EE2

.text:08048EE0 loc_8048EE0:                            ; CODE XREF: fun7+33j
.text:08048EE0                 xor     eax, eax


If num1 and value at n1 are equal, fun7 returns the value 0. If they are not,
then fun7 is called again with num and value at offset 8 into n1 as arguments.

At this point, this code seems extremely similar to the binary search. To
verify this, I define a structure for the node of the binary tree and apply to
the structure n1 and two other nodes it references. Sure enough I get:

.data:0804B308 n22             BinaryTreeNode <50, 804B2F0h, 804B2D8h>
.data:0804B314 n21             BinaryTreeNode <8, 804B2E4h, 804B2FCh>
.data:0804B320 n1              BinaryTreeNode <36, 804B314h, 804B308h>

So far so good: I see that n21 is less than n1 while n22 is greater! I further
keep redefining the other nodes and I get a binary tree:
(The best I could manage: would love a better representation)

              36
            /    \
           /      \
          /        \
         /          \
        /            \
       /              \
      8               50
     / \              / \
    /   \            /   \
   /     \          /     \
  6      22       45      107
 / \    /  \     /  \    /   \
1   7  20  35   40  47  99  1001

Okay so which of these numbers returns 7.

We know that:
* If left side, return value is 2 * return value of recursive call.
* If right side, return value is 2 * return value of recursive call + 1.

Since return value starts at 0, maximum number of level is 3 which means
maximum return value possible is 2 * 3 + 1 = 7: the number we need! So the
input number is the greatest number i.e. 1001:

Curses, you've found the secret phase!
But finding it and solving it are quite different...
1001
Wow! You've defused the secret stage!

Awesome! Secret stage defused too! That's the end of the binary bomb lab.
