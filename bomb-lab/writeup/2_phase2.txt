Phase 2
=======

Phase 2 expects 6 integers to be passed to it:
.text:08048B4E                 push    esi
.text:08048B4F                 push    ebx
.text:08048B50                 mov     edx, [ebp+input_string]
.text:08048B53                 add     esp, 0FFFFFFF8h
.text:08048B56                 lea     eax, [ebp+int_array]
.text:08048B59                 push    eax             ; int_array
.text:08048B5A                 push    edx             ; input_string
.text:08048B5B                 call    read_six_numbers
.text:08048B60                 add     esp, 10h

You will probably have [ebp + var_18] and [ebp + arg_0] instead of
input_string and int_array. Simply click on var_18 and hit 'n' to rename. This
makes it easier to remember what each stack variable is for.

I think typically one must never trust function names(usually there are none in
a stripped binary so it's alright I guess :) ). So I observed the code of
read_six_numbers and found out that it does read 6 integers from the argument:
the address of the six integers are pushed onto the stack, followed by the
address of the format string and that of the argument.

.text:08048FD8 input_string    = dword ptr  8
.text:08048FD8 int_array       = dword ptr  0Ch
.text:08048FD8
<function prologue snipped>
.text:08048FDE                 mov     ecx, [ebp+input_string]
.text:08048FE1                 mov     edx, [ebp+int_array]
.text:08048FE4                 lea     eax, [edx+14h]
.text:08048FE7                 push    eax
.text:08048FE8                 lea     eax, [edx+10h]
.text:08048FEB                 push    eax
.text:08048FEC                 lea     eax, [edx+0Ch]
.text:08048FEF                 push    eax
.text:08048FF0                 lea     eax, [edx+8]
.text:08048FF3                 push    eax
.text:08048FF4                 lea     eax, [edx+4]
.text:08048FF7                 push    eax
.text:08048FF8                 push    edx
.text:08048FF9                 push    offset aDDDDDD  ; "%d %d %d %d %d %d"
.text:08048FFE                 push    ecx             ; char *
.text:08048FFF                 call    _sscanf
.text:08049004                 add     esp, 20h
.text:08049007                 cmp     eax, 5
.text:0804900A                 jg      short loc_8049011
.text:0804900C                 call    explode_bomb

After reading 6 ints, the bomb explodes if the first number is not 1:

.text:08048B63                 cmp     [ebp+int_array], 1
.text:08048B67                 jz      short loc_8048B6E
.text:08048B69                 call    explode_bomb

What follows is a loop:

.text:08048B6E loc_8048B6E:                            ; CODE XREF: phase_2+1Fj
.text:08048B6E                 mov     ebx, 1
.text:08048B73                 lea     esi, [ebp+int_array]
.text:08048B76
.text:08048B76 loc_8048B76:                            ; CODE XREF: phase_2+44j
.text:08048B76                 lea     eax, [ebx+1]
.text:08048B79                 imul    eax, [esi+ebx*4-4]
.text:08048B7E                 cmp     [esi+ebx*4], eax
.text:08048B81                 jz      short loc_8048B88
.text:08048B83                 call    explode_bomb
.text:08048B88
.text:08048B88 loc_8048B88:                            ; CODE XREF: phase_2+39j
.text:08048B88                 inc     ebx
.text:08048B89                 cmp     ebx, 5
.text:08048B8C                 jle     short loc_8048B76

I don't think I should get into specifics of the code: the only trick is to
identify the initialization statement, the body and the condition check. The
following is C code of the loop.

for(i = 1; i <= 5; i++) {
    temp = (i + 1) * int_array[i - 1];
    if(arr[i] != temp) {
        explode_bomb();
    }
}

Quickly computing the answer and providing it as input to the bomb we get:

<prior output snipped>
Phase 1 defused. How about the next one?
1 2 6 24 120 720
That's number 2.  Keep going!

Phase 2 defused! Onto the next!
