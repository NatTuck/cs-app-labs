Phase 6
=======

Phase 6 is definitely a challenge: all levels till now have been fairly easy.
Of course, if the small hurdle is figured out, the rest is a walk in the park.

Instantly we see that 6 integers are read from input_string and stored in
int_array. We'll ignore the offset node1 for now.

.text:08048DA1                 mov     edx, [ebp+input_string]
.text:08048DA4                 mov     [ebp+var_34], offset node1
.text:08048DAB                 add     esp, 0FFFFFFF8h
.text:08048DAE                 lea     eax, [ebp+int_array]
.text:08048DB1                 push    eax             ; int_array
.text:08048DB2                 push    edx             ; input_string
.text:08048DB3                 call    read_six_numbers
.text:08048DB8                 xor     edi, edi
.text:08048DBA                 add     esp, 10h
.text:08048DBD                 lea     esi, [esi+0]


After reading 6 ints, edi is set to 0 and the stack is cleaned up. What follows
is are 2 loops: one nested inside the other. Let's take a look at the inner
one.

.text:08048DD1 loc_8048DD1:                            ; CODE XREF: phase_6+32j
.text:08048DD1                 lea     ebx, [edi+1]
.text:08048DD4                 cmp     ebx, 5
.text:08048DD7                 jg      short loc_8048DFC
.text:08048DD9                 lea     eax, ds:0[edi*4]
.text:08048DE0                 mov     [ebp+var_38], eax
.text:08048DE3                 lea     esi, [ebp+int_array]

.text:08048DE6 loc_8048DE6:                            ; CODE XREF: phase_6+62j
.text:08048DE6                 mov     edx, [ebp+var_38]
.text:08048DE9                 mov     eax, [edx+esi]
.text:08048DEC                 cmp     eax, [esi+ebx*4]
.text:08048DEF                 jnz     short loc_8048DF6
.text:08048DF1                 call    explode_bomb
.text:08048DF6
.text:08048DF6 loc_8048DF6:                            ; CODE XREF: phase_6+57j
.text:08048DF6                 inc     ebx
.text:08048DF7                 cmp     ebx, 5
.text:08048DFA                 jle     short loc_8048DE6

Before entering the loop, ebx(counter) is set to edi + 1 and exits if ebx > 5.

In the loop body, bomb explodes if int_array[edi] is equal to int_array[ebx]. Thus
the inner loop can be written as:

for(j = edi + 1; j < 5; j++) {
    if(int_array[j] == int_array[edi]) {
        explode_bomb();
    }
}

So that's done except for the value in the edi register. Let's look at the
outer loop to see if we can get that value.

.text:08048DB8                 xor     edi, edi
.text:08048DBA                 add     esp, 10h
.text:08048DBD                 lea     esi, [esi+0]
.text:08048DC0 loc_8048DC0:                            ; CODE XREF: phase_6+68j
.text:08048DC0                 lea     eax, [ebp+int_array]
.text:08048DC3                 mov     eax, [eax+edi*4]
.text:08048DC6                 dec     eax
.text:08048DC7                 cmp     eax, 5
.text:08048DCA                 jbe     short loc_8048DD1
.text:08048DCC                 call    explode_bomb
<inner loop>
.text:08048DFC loc_8048DFC:                            ; CODE XREF: phase_6+3Fj
.text:08048DFC                 inc     edi
.text:08048DFD                 cmp     edi, 5
.text:08048E00                 jle     short loc_8048DC0

The equivalent C code for above would be(I've included the code of the inner
as well) as follows.

for(i = 0; i <= 5; i++) {                   // outer loop statement
    if(int_array[i] > 5) {                  // Loop body
        explode_bomb();
    }
    for(j = i + 1; j < 5; j++) {            // Inner loop
        if(int_array[j] == int_array[i]) {
            explode_bomb();
        }
    }
}

So this code ensure 2 things:
* All elements are less than or equal to 5.
* All elements of the array are unique.

After this, the bomb iterates and stores some selected node's address in an
array:

for(i = 1; i <= 5; i++) {
    temp = node1;
    for(j = 1; j < int_array[i]; j++) {
        temp = temp -> next;
    }
    some_array[i] = temp;
}

I couldn't create high level mapping for loop that immediately follows this but
I understood it to be some form for rearrangement of the nodes.

This is followed by yet another loop:

.text:08048E60                 mov     dword ptr [esi+8], 0
.text:08048E67                 mov     esi, [ebp+curr_node]
.text:08048E6A                 xor     edi, edi
.text:08048E6C                 lea     esi, [esi+0]
.text:08048E70
.text:08048E70 loc_8048E70:                            ; CODE XREF: phase_6+EDj
.text:08048E70                 mov     edx, [esi+8]
.text:08048E73                 mov     eax, [esi]
.text:08048E75                 cmp     eax, [edx]
.text:08048E77                 jge     short loc_8048E7E
.text:08048E79                 call    explode_bomb
.text:08048E7E
.text:08048E7E loc_8048E7E:                            ; CODE XREF: phase_6+DFj
.text:08048E7E                 mov     esi, [esi+8]
.text:08048E81                 inc     edi
.text:08048E82                 cmp     edi, 4
.text:08048E85                 jle     short loc_8048E70
<function epilogue follows>

So this loop iterates over the nodes and checks if present node's value is less
than previous node. We also find that the value is at offset 0 while next
pointer is at offset 8. This gives us enough information to create the node's
structure definition as

struct ListNode {
    int value;
    int some_unknown_field;
    struct node *next;
}

We create this structure definition in IDA and apply it to the global node1
variable: first undefine all 12 bytes of node1, then select the 12 recently
undefined bytes and right click upon them. In the pop up menu, choose Structure
and then choose the name of the structure you defined. Node1 will then look
like ListNode <253, 1, 804B260h>(if 253 is shown in hex, choose Decimal type
for value in the structure definition). Repeat the same for all other nodes.

Now the challenge is much simpler: input 6 numbers such that after
rearrangment, the nodes are in decreasing order of their values.

Good work!  On to the next...
4 2 6 3 1 5
Congratulations! You've defused the bomb!

Phase 6 defused! Awesome! That's all phases defused successfully!
