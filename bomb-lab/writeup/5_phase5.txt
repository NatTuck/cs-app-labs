Phase 5
=======

I expected some difficulty out of Phase 5 but this challenge was pretty easy.

This phase requires a string of 6 characters as input.

.text:08048D32                 push    esi
.text:08048D33                 push    ebx
.text:08048D34                 mov     ebx, [ebp+input_string]
.text:08048D37                 add     esp, 0FFFFFFF4h
.text:08048D3A                 push    ebx
.text:08048D3B                 call    string_length
.text:08048D40                 add     esp, 10h
.text:08048D43                 cmp     eax, 6
.text:08048D46                 jz      short loc_8048D4D
.text:08048D48                 call    explode_bomb

After this, the bomb performs some iteration in which it transforms the string
and explodes if the result is not equal to "giants".

The transformation is hardcoded into the program and I notice that the
alphabets of "giants" do occur in it. Awesome! Now to figure out the
transformation and determine the input.

.text:08048D4D loc_8048D4D:                            ; CODE XREF: phase_5+1Aj
.text:08048D4D                 xor     edx, edx
.text:08048D4F                 lea     ecx, [ebp+transformed_string]
.text:08048D52                 mov     esi, offset transform_arr
.text:08048D57
.text:08048D57 loc_8048D57:                            ; CODE XREF: phase_5+3Dj
.text:08048D57                 mov     al, [edx+ebx]
.text:08048D5A                 and     al, 0Fh
.text:08048D5C                 movsx   eax, al
.text:08048D5F                 mov     al, [eax+esi]
.text:08048D62                 mov     [edx+ecx], al
.text:08048D65                 inc     edx
.text:08048D66                 cmp     edx, 5
.text:08048D69                 jle     short loc_8048D57

Here edx serves as the counter for this loop, ebx points to input, ecx points to
the destination and esi points to the transform array.

The loop first reads a character from input, performs bitwise AND with 0xf,
indexes into the transform array using result of bitwise AND and stores the
value there in transformed_string. The equivalent C code is

for(i = 0; i <= 5; i++) {
    transformed_string[i] = transform_arr[(int)(input_string[i] & 0xf)];
}


I suppose there can be multiple answers to this. I used the following string:

So you got that one.  Try this one.
o0ekm1
Good work!  On to the next...

Phase 5 defused! Onto phase 6!
