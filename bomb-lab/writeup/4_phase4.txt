Phase 4
=======

I loved solving phase 4 quite a bit since it was fairly easy. This phase
expects a number as an input:

.text:08048CE6                 mov     edx, [ebp+input_string]
.text:08048CE9                 add     esp, 0FFFFFFFCh
.text:08048CEC                 lea     eax, [ebp+num]
.text:08048CEF                 push    eax
.text:08048CF0                 push    offset aD       ; "%d"
.text:08048CF5                 push    edx             ; char *
.text:08048CF6                 call    _sscanf
.text:08048CFB                 add     esp, 10h
.text:08048CFE                 cmp     eax, 1
.text:08048D01                 jnz     short loc_8048D09
.text:08048D03                 cmp     [ebp+num], 0
.text:08048D07                 jg      short loc_8048D0E
.text:08048D09
.text:08048D09 loc_8048D09:                            ; CODE XREF: phase_4+21j
.text:08048D09                 call    explode_bomb

Instantly we see that the input number as to be a natural number due to the
check at 0x8048D03. Assuming we do give such an input, let's dive in further.

.text:08048D0E                 add     esp, 0FFFFFFF4h
.text:08048D11                 mov     eax, [ebp+num]
.text:08048D14                 push    eax
.text:08048D15                 call    func4
.text:08048D1A                 add     esp, 10h
.text:08048D1D                 cmp     eax, 55
.text:08048D20                 jz      short loc_8048D27
.text:08048D22                 call    explode_bomb
.text:08048D27 loc_8048D27:                            ; CODE XREF: phase_4+40j
.text:08048D27                 mov     esp, ebp
.text:08048D29                 pop     ebp
.text:08048D2A                 retn

So num is passed to func4() and if it doesn't return 55, the bomb explodes.

Let's take a look at func4.

.text:08048CA6                 push    esi
.text:08048CA7                 push    ebx
.text:08048CA8                 mov     ebx, [ebp+num]
.text:08048CAB                 cmp     ebx, 1
.text:08048CAE                 jle     short loc_8048CD0
.text:08048CB0                 add     esp, 0FFFFFFF4h
.text:08048CB3                 lea     eax, [ebx-1]
.text:08048CB6                 push    eax
.text:08048CB7                 call    func4
.text:08048CBC                 mov     esi, eax
.text:08048CBE                 add     esp, 0FFFFFFF4h
.text:08048CC1                 lea     eax, [ebx-2]
.text:08048CC4                 push    eax
.text:08048CC5                 call    func4
.text:08048CCA                 add     eax, esi
.text:08048CCC                 jmp     short loc_8048CD5
.text:08048CD0
.text:08048CD0 loc_8048CD0:                            ; CODE XREF: func4+Ej
.text:08048CD0                 mov     eax, 1
.text:08048CD5
.text:08048CD5 loc_8048CD5:                            ; CODE XREF: func4+2Cj
.text:08048CD5                 lea     esp, [ebp-18h]
.text:08048CD8                 pop     ebx
.text:08048CD9                 pop     esi
.text:08048CDA                 mov     esp, ebp
.text:08048CDC                 pop     ebp
.text:08048CDD                 retn
.text:08048CDD func4           endp

func4() returns 1 if the value of num <= 1. If num > 1, it calls itself
recursively twice with arguments as (num - 1) and (num - 2) and returns the sum
of the return values. I quickly write equivalent C code:

int func4(int num) {
    if(num <= 1)
        return 1;
    else
        return func(num - 1) + func(num - 2);
}

The fibonacci series! I quickly input the required value to the bomb:

Halfway there!
9
So you got that one.  Try this one.

4 down, 2 to go. Onto phase 5.
